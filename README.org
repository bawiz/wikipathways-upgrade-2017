* Installation

1) Run setup-site.sh to set up the site after doing an initial checkout
2) Instances of ~wikipathways.username~ should be replaced with a "proper" mwjs fetching of the user name.  You can use ~mw.config.get("wgUserName")~.
3) Modify [[https://wikipathways.org/index.php/MediaWiki:Common.js][MediaWiki:Common.js]] so that it executes after things are loaded.
	- Surround everything with
	#+BEGIN_SRC javascript
		mw.loader.using( ['mediawiki.user'] ).done( function() {
		… // everything in MediaWiki:Common.js right now
		} );
	#+END_SRC
	- Change ~addOnloadHook()~ to ~$(document.ready(…))~.  See [[https://www.mediawiki.org/wiki/ResourceLoader/Migration_guide_(users)#Legacy_removals][Legacy removals]] for more information.  For example, change
	#+BEGIN_SRC javascript
		addOnloadHook(CustomizeModificationsOfSidebar);
	#+END_SRC
		to
	#+BEGIN_SRC javascript
		$(document.ready( function() { CustomizeModificationsOfSidebar(); } );
	#+END_SRC

* Code Layout
** Git submodules
/tbd/
** Clean repos
/tbd/
* Solving problems, fixing bugs
Since I like to have a concrete target when I write, I'll document how I'm solving a problem that Egon found.  This will demonstrate how I examine the code and give some idea of how to use the git submodules.
** [[https://github.com/wikipathways/wikipathways.org/issues/65][Clicking “et al.” does not have any effect]]
1) Once [[https://vm1.wikipathways.org/Pathway:WP528][the page]] in the bug loads I confirm that clicking any author's name brings up their user page.  Clicking “et al.” does not appear to work.
2) Checking the Javascript console, I see the following message: =ReferenceError: AuthorInfo is not defined=
3) Mouusing over “et al.” I see: =javascript:AuthorInfo.showAllAuthors()=
4) Using =git submodule foreach= to invoke =git grep=, we can search all the repositories in under a second.  When we do, we find it:
	#+BEGIN_EXAMPLE sh
	$ git submodule foreach 'git grep showAllAuthors || :'
	Entering 'extensions/BiblioPlus'
	Entering 'extensions/Cite'
	Entering 'extensions/CodeEditor'
	Entering 'extensions/ConfirmEdit'
	Entering 'extensions/ContributionScores'
	Entering 'extensions/EmbedVideo'
	Entering 'extensions/GPML'
	modules/AuthorInfo.js:			html += ", <a href='javascript:AuthorInfo.showAllAuthors()' " +
	modules/AuthorInfo.js:AuthorInfo.showAllAuthors = function() {
	Entering 'extensions/GPMLConverter'
	#+END_EXAMPLE
5) [@5] From here, we can see that the GPML extension should be loading =modules/AuthorInfo.js= in order to provide the function.  It appears that this is missing.
	
	Also, since we know it is in the [[https://github.com/wikipathways/mediawiki-extensions-WikiPathways-GPML][GPML extension's repository]], we can narrow our work to that repository.\\Using =git grep= again, we check to make sure that the file is in the list of files available to [[https://www.mediawiki.org/wiki/ResourceLoader][ResourceLoader]]:
	#+BEGIN_EXAMPLE sh
	$ cd extensions/GPML
	$ git grep -n AuthorInfo.js
	extension.json:64:				"AuthorInfo.js"
	#+END_EXAMPLE
6) [@6] To find the module for the AuthorInfo.js file, we examine the file =extension.json= in the GPML extension. From here, we can see that if ResourceLoader is told to load the [[https://github.com/wikipathways/mediawiki-extensions-WikiPathways-GPML/blob/ee4558fe5682d0e342f7366063fcaf60ec3788b9/extension.json#L62][wpi.AuthorInfo]] module, then it will send the [[https://github.com/wikipathways/mediawiki-extensions-WikiPathways-GPML/blob/master/modules/AuthorInfo.js][AuthorInfo.js]] file:
	#+BEGIN_EXAMPLE sh :results output
	$ jq -c '.ResourceModules | to_entries[] | \
	    select( .value.scripts | index("AuthorInfo.js") )| \
	    .key' extensions/GPML/extension.json
	"wpi.AuthorInfo"
	#+END_EXAMPLE
7) [@7] <<gpml-grep-result>>Using git grep only on the =GPML= extension, we find that the =wpi.AuthorInfo= module is called just before we return from [[https://github.com/wikipathways/mediawiki-extensions-WikiPathways-GPML/blob/master/src/AuthorInfoList.php#L169][~WikiPathways\GPML\AuthorInfoList::render()~]]:
	#+BEGIN_EXAMPLE
	$ cd extensions/GPML
	$ git grep -n wpi.AuthorInfo
	extension.json:62:		"wpi.AuthorInfo": {
	src/AuthorInfoList.php:182:		$parser->getOutput()->addModules( "wpi.AuthorInfo" );
	src/Content.php:249:			[ "wpi.AuthorInfo", "wpi.Pathway", "wpi.toggleButton", "wpi.PageEditor" ]
	#+END_EXAMPLE
8) [@8] MediaWiki is told in ~WikiPathways\GPML\Hook::onParserFirstCallInit()~ to call ~WikiPathways\GPML\AuthorInfoList::render()~ when it comes across the <AuthorInfo> [[https://www.mediawiki.org/wiki/Manual:Tag_extensions][tag]] in wikitext:
	#+BEGIN_EXAMPLE
	$ git grep -n B 2 AuthorInfoList::render
	src/Hook.php-54-	public static function onParserFirstCallInit( Parser &$parser ) {
	src/Hook.php-55-		$parser->setHook(
	src/Hook.php:56:			"AuthorInfo", "WikiPathways\\GPML\\AuthorInfoList::render"
	#+END_EXAMPLE
9) [@9] We can't find the <AuthorInfo> tag anywhere in GPML, so let's look in the other extensions:
	#+BEGIN_EXAMPLE
	$ pwd
	…/new.wikipathways.org/extensions/GPML
	$ git grep ‘<AuthorInfo'
	$ cd ..
	$ git submodule foreach -q 'git grep "<AuthorInfo" || :'
	$
	#+END_EXAMPLE
10) [@10] Since it isn't invoked anywhere (=<AuthorInfo>= is kept for backwards compatibility just in case anyone used it in wikitext somewhere), let's look at the other match back in step [[gpml-grep-result]].  There we saw that the =wpi.AuthorInfo= module is also included in ~WikiPathways\GPML\Content::fillParserOutput()~ but is this ever called?
	
	Let's do a brute force check:
	#+BEGIN_EXAMPLE
	$ curl https://vm1.wikipathways.org/Pathway:WP528?debug=true |  grep wpi.AuthorInfo
		<script>(window.RLQ=window.RLQ||[]).push(function(){mw.loader.load(["wpi.PathwayLoader.js","wpi.openInPathVisio","wpi.Dropdown","wpi.CurationTags","wpi.AuthorInfo","wpi.XrefPanel","wpi.Pathway","wpi.toggleButton","wpi.PageEditor","mediawiki.action.view.postEdit","site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","jquery.tablesorter","mediawiki.searchSuggest","ext.biblioPlus.qtip.config","skins.vector.js"]);});</script>
	#+END_EXAMPLE
	/(Note the use of =?debug=true= to keep MediaWiki from minimizing the output and allowing us to read it.)/
	
	This shows us that it is at least referenced in the output.
11) Adding =?debug=true= to the url we want to check ([[https://vm1.wikipathways.org/Pathway:WP528?debug=true][like this]]) and then loading it in the browser forces each javascript file to be loaded seperately.  /*When we do this, it looks clicking “et al.” works without a problem.*/
12) We visit the page again without =?debug=true= and [[https://www.mediawiki.org/wiki/Manual:Purge][purge the cache]]. The problem re-appears
	
	At this point, we conclude that we found a bug in MediaWiki's handling of javascript files.
13) 

* Other Documents
- [[./docs/ConvertingToResourceLoader.org][Converting AuthorInfo to ResourceLoader]]
- [[./docs/MediaWiki_conventions.org][MediaWiki conventions]]
